let path,isNumber,DATA_TYPE_DAILY,getSymbolDataByType,getStocksFromFolder,config,getTickers,DATA_TYPE_FOLDER_MAPPING;_26e‍.w("path",[["default",["path"],function(v){path=v}]]);_26e‍.w("lodash",[["isNumber",["isNumber"],function(v){isNumber=v}]]);_26e‍.w("../../stock-data-collector/helper/constants",[["DATA_TYPE_DAILY",["DATA_TYPE_DAILY"],function(v){DATA_TYPE_DAILY=v}]]);_26e‍.w("../../stock-probability-analyzer/dynamicConditions/helper",[["getSymbolDataByType",["getSymbolDataByType"],function(v){getSymbolDataByType=v}]]);_26e‍.w("../../stock-probability-analyzer/helpers/stockData",[["getStocksFromFolder",["getStocksFromFolder"],function(v){getStocksFromFolder=v}]]);_26e‍.w("../../stock-probability-analyzer/config",[["default",["config"],function(v){config=v}]]);_26e‍.w("../../stock-data-collector/api/tickers",[["getTickers",["getTickers"],function(v){getTickers=v}]]);_26e‍.w("../../stock-probability-analyzer/constants",[["DATA_TYPE_FOLDER_MAPPING",["DATA_TYPE_FOLDER_MAPPING"],function(v){DATA_TYPE_FOLDER_MAPPING=v}]]);








class SymbolController {
  static async getData(req, res) {
    try {
      const { symbol, dataType } = req.params;
      if (symbol && dataType) {
        let data = await getSymbolDataByType(dataType, symbol, req.query);

        if ("limit" in req.query && isNumber(parseInt(req.query.limit))) {
          let dataSize = Object.keys(data).length;
          let limitedData = {};

          Object.keys(data)
            .sort((a, b) => a.localeCompare(b, "en", { ignorePunctuation: true }))
            .slice(dataSize - parseInt(req.query.limit))
            .forEach((date) => (limitedData[date] = data[date]));

          data = limitedData;
        }

        if (data) {
          res.json({ status: "success", data });
        } else {
          res.json({ status: "error", message: "No data found" });
        }
      }
    } catch (err) {}
  }
  static async getListData(req, res) {
    try {
      let _symbolsPath = path.join(__dirname, "../../../", config.stockData.rootFolder, config.stockData.currentVersionFolder, DATA_TYPE_FOLDER_MAPPING[DATA_TYPE_DAILY]);
      let symbols = await getStocksFromFolder(_symbolsPath, false, false);

      const allTickersDetails = [...(await getTickers("XNYS")), ...(await getTickers("XNAS"))].filter((symbol) => symbols.includes(symbol.ticker));

      res.json({ status: "success", data: allTickersDetails });
    } catch (err) {
      _26e‍.g.console.log(err);
    }
  }
}

module.exports = SymbolController;
